fn add a, b {
  a + b
}

let add (a, b) {
  a + b
}


fn fibfast(n)
  if {n < 2}
    n
    fibup n 2 1 0

fn add(a, b)
  {a + b}

a, b => {
  a + b
}

x, y, s => {
  x * s + y
}

() {}

fn fetch (callback) {
  ...do stuff
}

handle_result :: Tuple(Atom, Any) -> String
handle_result = fn
  {:ok, result} -> IO.puts "Handling result..."
  {:ok, _} -> IO.puts "This would be never run as previous will be matched beforehand."
  {:error} -> IO.puts "An error has occurred!"
end

add :: Int -> Int -> Int
fn add
  a, b -> a + b
end

ty safe_div : Int -> Int -> Int
fn safe_div {
  a, 0 -> 0
  a, b -> a / b
}


ty fibfast : Int -> Int
fn fibfast {
  n | n < 2 -> n
  n -> fibup(n, 2, 1, 0)
}

OR

ty safe_div: Int -> Int -> Int
fn safe_div: a, 0 -> 0
fn safe_div: a, b -> a+ b

ty add : Int -> Int -> Int
fn add {
  a, b -> a + b
}

fn safe_div :: Int -> Int -> Int  
  a, 0 => 0
  a, b => a + b
end

fn fibfast :: Int -> Int
  n | n < 2 -> n
  n -> fibup(n, 2, 1, 0)
end

fn n -> fibup(n, 2, 1, 0) end

ty safe_div: Int -> Int -> Int
fn safe_div
  a, 0 -> 0
  a, b -> a / b
end

fn : x -> x + 2

let safe_div: Int -> Int -> Int =
  a, 0 -> 0
  a, b -> 
    a / b

<exprtype> <exprlabel> : <sameline body>
<exprtype> <exprlabel> =
  <indented body>


<exprsymbol> <exprlabel> <: exprtype>?
  <exprbody>

let 
  x = 1
in
  x

type Person
  age: Int
  address: String
  permissions: Permissions
  relatives: [Person]

fn fib: Int -> Int
  n | n < 2 -> n
  n -> 
    fib (n - 1) + fib (n - 2)

fn into_address: [Person] -> [String]
  persons -> 
    map (p -> p.address) (persons)

fn into_address: [Person] -> [String]
  map (p -> p.address) // evaluates to lambda

fn factorial: Int -> Int
  n -> 
    if n == 0 
      1
    else 
      n * factorial (n - 1)

fn factorial: Int -> Int
  n | n == 0 -> 1
  n -> n * factorial (n - 1)

case n: Int
  0 -> 0
  1 -> 1
  n -> n

// desugar into case
fn fib: Int -> Int
  n ->
    case n
      0 -> 0
      1 -> 1
      n -> 
        fib (n - 1) + fib (n - 2)

// sugared
fn fib: Int -> Int
  0 -> 0
  1 -> 1
  n -> 
    fib (n - 1) + fib (n - 2)

fn from_string: String -> Bool
  "true" -> true
  _ -> false

fn to_string: Bool -> String
  true -> "true"
  false -> "false"

fn gcd_v2: Int -> Int -> Int
  n 0 -> n
  0 n -> n
  n m | n > m -> gcd_v2 (n - m) (m)
      | otherwise -> gcd_v2 (n) (m - n)

lambda: <arg list> -> <fn body>
